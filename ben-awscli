#!/usr/bin/env python3
import boto3, click

INSTANCE_TYPE = "t3.micro" # או t2.small
CREATED_BY_VAL = "Ben-cli"
OWNER= "Ben Elbaz"

ec2 = boto3.client("ec2")
s3 = boto3.client("s3")
route53 = boto3.client("route53")

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'], max_content_width=120)

@click.group(context_settings=CONTEXT_SETTINGS, help="Ben's AWS management CLI")
def cli():
    pass

# EC2

def count_cli_instances():
    resp = ec2.describe_instances(
        Filters=[{"Name": "tag:CreatedBy", "Values": [CREATED_BY_VAL]}]
    )
    count = 0
    for r in resp.get("Reservations", []):
        for inst in r.get("Instances", []):
            state = inst["State"]["Name"]
            if state != "terminated":
                count += 1
    return count

@cli.command(help="Create instance (name only)")
@click.argument("name")
def ec2create(name):
    running = count_cli_instances()
    if running >= 2:
        print("ERROR: Instance cap reached (2). Terminate one before creating a new one.")
    else:
        run_instance = ec2.run_instances(
            ImageId="ami-00ca32bbc84273381",  # Amazon Linux ami in us-east-1
            InstanceType=INSTANCE_TYPE,
            MinCount=1,
            MaxCount=1,
            TagSpecifications=[{
                "ResourceType": "instance",
                "Tags": [
                    {"Key": "Name", "Value": name}, # Instance name
                    {"Key": "CreatedBy", "Value": CREATED_BY_VAL},
                    {"Key": "Owner", "Value": OWNER},
                    {"Key": "Project", "Value": "Python-Project"},
                    {"Key": "Environment", "Value": "dev"}
                ]
            }]
        )
        instance_id = run_instance["Instances"][0]["InstanceId"]
        print(f"Created instance: {instance_id}, named: {name}")

@cli.command(help="Stop instance by ID")
@click.argument("instance_id")
def ec2stop(instance_id):
    ec2.stop_instances(InstanceIds=[instance_id])
    print("Stopping instance", instance_id)

@cli.command(help="Start instance by ID")
@click.argument("instance_id")
def ec2start(instance_id):
    ec2.start_instances(InstanceIds=[instance_id])
    print("Starting instance", instance_id)

@cli.command(help="List instances created by this tool")
def ec2list():
    resp = ec2.describe_instances(
        Filters=[{"Name": "tag:CreatedBy", "Values": [CREATED_BY_VAL]}]
    )

    instances = []
    for r in resp.get("Reservations", []):
        for inst in r.get("Instances", []):
            instance_id = inst["InstanceId"]
            state = inst["State"]["Name"]
            if state == "terminated":
                continue
            inst_type = inst["InstanceType"]
            ip = inst.get("PublicIpAddress", "N/A")
            name = next(
                (t["Value"] for t in inst.get("Tags", []) if t["Key"] == "Name"),
                "N/A"
            )
            instances.append({
                "InstanceId": instance_id,
                "Name": name,
                "State": state,
                "Type": inst_type,
                "PublicIP": ip
            })
            print(f"""
                  Instance id: {instance_id}
                  Instance name: {name}
                  State: {state}
                  Instance type: {inst_type}
                  IP: {ip}""")

# S3

@cli.command(help="Create S3 bucket (private by default, add --public for public-read)")
@click.argument("bucket_name")
@click.option("--public", is_flag=True, help="Make bucket public-read")
def s3create(bucket_name, public):
    try:
        s3.create_bucket(Bucket=bucket_name)

        s3.put_bucket_tagging(
            Bucket=bucket_name,
            Tagging={"TagSet": [
                {"Key": "CreatedBy", "Value": CREATED_BY_VAL},
                {"Key": "Owner", "Value": OWNER},
                {"Key": "Project", "Value": "Python-Project"},
                {"Key": "Environment", "Value": "dev"},
            ]}
        )

        if public:
            confirm = input("Are you sure you want to create a PUBLIC bucket? (yes/no): ").lower()
            if confirm != "yes":
                print("Bucket will not be created.")
                return
            s3.put_bucket_acl(Bucket=bucket_name, ACL="public-read")

        print(f"Bucket {bucket_name} created ({'public' if public else 'private'}).")

    except Exception as e:
        print("ERROR:", str(e))

@cli.command(help="Upload file to an S3 bucket created by this CLI")
@click.option("--bucket", required=True, help="Bucket name")
@click.option("--file", required=True, help="Path to file")
def s3upload(bucket, file):
    tags = s3.get_bucket_tagging(Bucket=bucket)["TagSet"]
    created_by = next((t["Value"] for t in tags if t["Key"] == "CreatedBy"), None)
    if created_by != CREATED_BY_VAL:
        print(f"ERROR: Bucket {bucket} was not created by this CLI.")
        return

    key = file.split("/")[-1]   # File name
    s3.upload_file(file, bucket, key)
    print(f"Uploaded {file} to s3://{bucket}/{key}")

@cli.command(help="List S3 buckets created by this CLI")
def s3list():
    resp = s3.list_buckets()
    found = False
    for b in resp["Buckets"]:
        name = b["Name"]
        try:
            tags = s3.get_bucket_tagging(Bucket=name)["TagSet"]
            created_by = next((t["Value"] for t in tags if t["Key"] == "CreatedBy"), None)
        except Exception:
            created_by = None

        if created_by == CREATED_BY_VAL:
            print(f"- {name}")
            found = True

    if not found:
        print("No buckets created by this CLI were found.")

# Route 53


@cli.command(help="Create Route53 hosted zone (public)")
@click.argument("domain")
def r53create(domain):

    resp = route53.create_hosted_zone(
        Name=domain,
        CallerReference=domain,  # Unique identifier
        HostedZoneConfig={"Comment": "Managed by Ben-cli", "PrivateZone": False},
    )

    zone_id = resp["HostedZone"]["Id"].split("/")[-1]  # /hostedzone/Z0123456789ABCDEF -> Z0123456789ABCDEF

    route53.change_tags_for_resource(
        ResourceType="hostedzone",
        ResourceId=zone_id,
        AddTags=[
            {"Key": "CreatedBy", "Value": CREATED_BY_VAL},
            {"Key": "Owner", "Value": OWNER},
            {"Key": "Project", "Value": "Python-Project"},
            {"Key": "Environment", "Value": "dev"},
        ],
    )

    print(f"Hosted zone created: {domain} (id: {zone_id})")

@cli.command(help="Manage Route53 records (create/update/delete)")
@click.argument("action", type=click.Choice(["create","update","delete"]))
@click.option("--zone", required=True, help="Domain name of the hosted zone (e.g., benben.com)")
@click.option("--name", required=True, help="Record name (e.g., www.benben.com)")
@click.option("--type", required=True, help="Record type (A, CNAME, TXT, etc.)")
@click.option("--value", required=True, help="Record value (e.g., 1.2.3.4)")
@click.option("--ttl", default=300, show_default=True)
def r53manage(action, zone, name, type, value, ttl):

    zones = route53.list_hosted_zones_by_name(DNSName=zone)["HostedZones"]
    if not zones:
        print("ERROR: Zone not found")
        return
    zid = zones[0]["Id"].split("/")[-1]  # /hostedzone/Z0123456789ABCDEF -> Z0123456789ABCDEF

    tags = route53.list_tags_for_resource(ResourceType="hostedzone", ResourceId=zid)["ResourceTagSet"]["Tags"]
    created_by = next((t["Value"] for t in tags if t["Key"] == "CreatedBy"), None)
    if created_by != CREATED_BY_VAL:
        print("ERROR: Zone is not owned by this CLI")
        return

    action_map = {"create":"CREATE","update":"UPSERT","delete":"DELETE"}
    record = {
        "Name": name,
        "Type": type,
        "TTL": ttl,
        "ResourceRecords": [{"Value": value}]
    }

    route53.change_resource_record_sets(
        HostedZoneId=zid,
        ChangeBatch={"Changes": [{"Action": action_map[action], "ResourceRecordSet": record}]}
    )
    print(f"{action_map[action]} {type} {name} -> {value} (zone {zone})")

@cli.command(help="List CLI-created Route53 zones and their records")
def r53list():
    zones = route53.list_hosted_zones()["HostedZones"]

    for z in zones:
        zid = z["Id"].split("/")[-1]  # /hostedzone/Z0123456789ABCDEF -> Z0123456789ABCDEF

        tags = route53.list_tags_for_resource(ResourceType="hostedzone", ResourceId=zid)["ResourceTagSet"]["Tags"]
        created_by = next((t["Value"] for t in tags if t["Key"] == "CreatedBy"), None)
        if created_by != CREATED_BY_VAL:
            continue

        print(f"Zone: {z['Name'].rstrip('.')} (ID: {zid})")
        print("  Records:")

        records = route53.list_resource_record_sets(HostedZoneId=zid)["ResourceRecordSets"]
        for r in records:
            values = ", ".join([v["Value"] for v in r.get("ResourceRecords", [])])
            print(f"    - {r['Type']} {r['Name']} -> {values if values else 'N/A'}")

        print()

if __name__ == "__main__":
    cli()





